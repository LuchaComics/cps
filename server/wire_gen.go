// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/LuchaComics/cps-backend/adapter/cache/mongodbcache"
	"github.com/LuchaComics/cps-backend/adapter/emailer/mailgun"
	"github.com/LuchaComics/cps-backend/adapter/paymentprocessor/stripe"
	"github.com/LuchaComics/cps-backend/adapter/pdfbuilder"
	"github.com/LuchaComics/cps-backend/adapter/storage/mongodb"
	"github.com/LuchaComics/cps-backend/adapter/storage/s3"
	"github.com/LuchaComics/cps-backend/adapter/templatedemailer"
	controller6 "github.com/LuchaComics/cps-backend/app/attachment/controller"
	datastore5 "github.com/LuchaComics/cps-backend/app/attachment/datastore"
	controller4 "github.com/LuchaComics/cps-backend/app/comicsub/controller"
	datastore3 "github.com/LuchaComics/cps-backend/app/comicsub/datastore"
	controller10 "github.com/LuchaComics/cps-backend/app/credit/controller"
	datastore4 "github.com/LuchaComics/cps-backend/app/credit/datastore"
	controller5 "github.com/LuchaComics/cps-backend/app/customer/controller"
	datastore9 "github.com/LuchaComics/cps-backend/app/eventlog/datastore"
	"github.com/LuchaComics/cps-backend/app/gateway/controller"
	controller7 "github.com/LuchaComics/cps-backend/app/offer/controller"
	datastore8 "github.com/LuchaComics/cps-backend/app/offer/datastore"
	stripe2 "github.com/LuchaComics/cps-backend/app/paymentprocessor/controller/stripe"
	controller8 "github.com/LuchaComics/cps-backend/app/receipt/controller"
	datastore6 "github.com/LuchaComics/cps-backend/app/receipt/datastore"
	controller3 "github.com/LuchaComics/cps-backend/app/store/controller"
	datastore2 "github.com/LuchaComics/cps-backend/app/store/datastore"
	controller2 "github.com/LuchaComics/cps-backend/app/user/controller"
	"github.com/LuchaComics/cps-backend/app/user/datastore"
	controller9 "github.com/LuchaComics/cps-backend/app/userpurchase/controller"
	datastore7 "github.com/LuchaComics/cps-backend/app/userpurchase/datastore"
	"github.com/LuchaComics/cps-backend/config"
	"github.com/LuchaComics/cps-backend/inputport/http"
	"github.com/LuchaComics/cps-backend/inputport/http/attachment"
	"github.com/LuchaComics/cps-backend/inputport/http/comicsub"
	"github.com/LuchaComics/cps-backend/inputport/http/credit"
	"github.com/LuchaComics/cps-backend/inputport/http/customer"
	"github.com/LuchaComics/cps-backend/inputport/http/gateway"
	"github.com/LuchaComics/cps-backend/inputport/http/middleware"
	"github.com/LuchaComics/cps-backend/inputport/http/offer"
	stripe3 "github.com/LuchaComics/cps-backend/inputport/http/paymentprocessor/stripe"
	"github.com/LuchaComics/cps-backend/inputport/http/receipt"
	"github.com/LuchaComics/cps-backend/inputport/http/store"
	"github.com/LuchaComics/cps-backend/inputport/http/user"
	"github.com/LuchaComics/cps-backend/inputport/http/userpurchase"
	"github.com/LuchaComics/cps-backend/provider/cpsrn"
	"github.com/LuchaComics/cps-backend/provider/jwt"
	"github.com/LuchaComics/cps-backend/provider/kmutex"
	"github.com/LuchaComics/cps-backend/provider/logger"
	"github.com/LuchaComics/cps-backend/provider/password"
	"github.com/LuchaComics/cps-backend/provider/time"
	"github.com/LuchaComics/cps-backend/provider/uuid"
)

import (
	_ "go.uber.org/automaxprocs"
	_ "time/tzdata"
)

// Injectors from wire.go:

func InitializeEvent() Application {
	slogLogger := logger.NewProvider()
	conf := config.New()
	provider := uuid.NewProvider()
	timeProvider := time.NewProvider()
	jwtProvider := jwt.NewProvider(conf)
	kmutexProvider := kmutex.NewProvider()
	passwordProvider := password.NewProvider()
	client := mongodb.NewStorage(conf, slogLogger)
	cacher := mongodbcache.NewCache(conf, slogLogger, client)
	emailer := mailgun.NewEmailer(conf, slogLogger, provider)
	templatedEmailer := templatedemailer.NewTemplatedEmailer(conf, slogLogger, provider, emailer)
	paymentProcessor := stripe.NewPaymentProcessor(conf, slogLogger, provider)
	userStorer := datastore.NewDatastore(conf, slogLogger, client)
	storeStorer := datastore2.NewDatastore(conf, slogLogger, client)
	gatewayController := controller.NewController(conf, slogLogger, provider, jwtProvider, kmutexProvider, passwordProvider, cacher, client, templatedEmailer, paymentProcessor, userStorer, storeStorer)
	middlewareMiddleware := middleware.NewMiddleware(conf, slogLogger, provider, timeProvider, jwtProvider, gatewayController)
	handler := gateway.NewHandler(gatewayController)
	comicSubmissionStorer := datastore3.NewDatastore(conf, slogLogger, client)
	creditStorer := datastore4.NewDatastore(conf, slogLogger, client)
	attachmentStorer := datastore5.NewDatastore(conf, slogLogger, client)
	receiptStorer := datastore6.NewDatastore(conf, slogLogger, client)
	userPurchaseStorer := datastore7.NewDatastore(conf, slogLogger, client)
	userController := controller2.NewController(conf, slogLogger, provider, passwordProvider, client, storeStorer, userStorer, comicSubmissionStorer, creditStorer, attachmentStorer, receiptStorer, userPurchaseStorer, templatedEmailer)
	userHandler := user.NewHandler(userController)
	s3Storager := s3.NewStorage(conf, slogLogger, provider)
	storeController := controller3.NewController(conf, slogLogger, provider, s3Storager, emailer, templatedEmailer, client, storeStorer, userStorer, comicSubmissionStorer, creditStorer, attachmentStorer, receiptStorer, userPurchaseStorer)
	storeHandler := store.NewHandler(storeController)
	cpsrnProvider := cpsrn.NewProvider()
	cbffBuilder := pdfbuilder.NewCBFFBuilder(conf, slogLogger, provider)
	pcBuilder := pdfbuilder.NewPCBuilder(conf, slogLogger, provider)
	ccimgBuilder := pdfbuilder.NewCCIMGBuilder(conf, slogLogger, provider)
	ccscBuilder := pdfbuilder.NewCCSCBuilder(conf, slogLogger, provider)
	ccBuilder := pdfbuilder.NewCCBuilder(conf, slogLogger, provider)
	ccugBuilder := pdfbuilder.NewCCUGBuilder(conf, slogLogger, provider)
	comicSubmissionController := controller4.NewController(conf, slogLogger, provider, s3Storager, passwordProvider, kmutexProvider, cpsrnProvider, cbffBuilder, pcBuilder, ccimgBuilder, ccscBuilder, ccBuilder, ccugBuilder, emailer, client, templatedEmailer, userStorer, comicSubmissionStorer, storeStorer, creditStorer)
	comicsubHandler := comicsub.NewHandler(slogLogger, comicSubmissionController)
	customerController := controller5.NewController(conf, slogLogger, provider, s3Storager, passwordProvider, paymentProcessor, cbffBuilder, templatedEmailer, client, userStorer, comicSubmissionStorer)
	customerHandler := customer.NewHandler(customerController)
	attachmentController := controller6.NewController(conf, slogLogger, provider, s3Storager, emailer, client, attachmentStorer, userStorer, comicSubmissionStorer)
	attachmentHandler := attachment.NewHandler(attachmentController)
	offerStorer := datastore8.NewDatastore(conf, slogLogger, client)
	offerontroller := controller7.NewController(conf, slogLogger, provider, client, storeStorer, offerStorer, userStorer)
	offerHandler := offer.NewHandler(slogLogger, offerontroller)
	receiptController := controller8.NewController(conf, slogLogger, provider, client, storeStorer, receiptStorer)
	receiptHandler := receipt.NewHandler(slogLogger, receiptController)
	userPurchaseController := controller9.NewController(conf, slogLogger, provider, client, storeStorer, userPurchaseStorer)
	userpurchaseHandler := userpurchase.NewHandler(slogLogger, userPurchaseController)
	eventLogStorer := datastore9.NewDatastore(conf, slogLogger, client)
	stripePaymentProcessorController := stripe2.NewController(conf, slogLogger, provider, s3Storager, passwordProvider, emailer, templatedEmailer, paymentProcessor, kmutexProvider, client, storeStorer, userStorer, receiptStorer, offerStorer, eventLogStorer, comicSubmissionStorer, userPurchaseStorer)
	stripeHandler := stripe3.NewHandler(slogLogger, stripePaymentProcessorController)
	creditController := controller10.NewController(conf, slogLogger, provider, client, storeStorer, creditStorer, userStorer, offerStorer)
	creditHandler := credit.NewHandler(slogLogger, creditController)
	inputPortServer := http.NewInputPort(conf, slogLogger, middlewareMiddleware, handler, userHandler, storeHandler, comicsubHandler, customerHandler, attachmentHandler, offerHandler, receiptHandler, userpurchaseHandler, stripeHandler, creditHandler)
	application := NewApplication(slogLogger, inputPortServer)
	return application
}
